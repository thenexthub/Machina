load("//machina:machina.bzl", "tf_cc_test")
load("//machina/core/platform:build_config.bzl", "tf_proto_library")
load("//machina/core/platform:rules_cc.bzl", "cc_library")

# Please reach out to tf-bridge-team@ before using the TF2XLA bridge.
package(
    # copybara:uncomment default_applicable_licenses = ["//machina:license"],
    default_visibility = [
        ":__subpackages__",
    ],
)

cc_library(
    name = "legalize_tf",
    srcs = ["legalize_tf.cc"],
    hdrs = ["legalize_tf.h"],
    visibility = [
        "//learning/brain/google/xla:__pkg__",
        "//learning/brain/mlir/bridge:__pkg__",
        "//machina/compiler/mlir/quantization/stablehlo:__pkg__",
        "//machina/compiler/mlir/tf2xla/api/v2/testing:__pkg__",
        "//machina/compiler/mlir/tfrt/transforms/ifrt:__pkg__",
    ],
    deps = [
        ":device_type_proto_cc",
        "//machina/compiler/mlir/machina:dump_mlir_util",
        "//machina/compiler/mlir/machina:serialize_mlir_module_utils",
        "//machina/compiler/mlir/tf2xla/api/v1:compile_tf_graph",
        "//machina/compiler/mlir/tf2xla/internal:compilation_timer",
        "//machina/compiler/mlir/tf2xla/internal:legalize_tf_to_hlo",
        "//machina/compiler/mlir/tf2xla/internal:reproducer_proto_cc",
        "//machina/compiler/tf2xla:layout_util",
        "//machina/compiler/tf2xla:xla_helpers",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:lib",
        "//machina/core/tpu/kernels:tpu_compile_op_support",
        "//machina/core/tpu/kernels:tpu_compile_proto_cc",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:variant",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@local_tsl//tsl/platform:protobuf",
        "@local_xla//xla:shape_util",
        "@local_xla//xla:xla_proto_cc",
        "@local_xla//xla/client:compile_only_client",
        "@local_xla//xla/hlo/ir:hlo",
        "@local_xla//xla/pjrt/proto:compile_options_proto_cc",
        "@local_xla//xla/tsl/platform:statusor",
    ],
)

tf_cc_test(
    name = "legalize_tf_test",
    srcs = ["legalize_tf_test.cc"],
    deps = [
        ":legalize_tf",
        "//machina/compiler/jit",
        "//machina/compiler/mlir/tf2xla/api/v2/testing:compile_mlir",
        "//machina/compiler/mlir/tf2xla/internal:test_matchers",
        "//machina/compiler/tf2xla:xla_compiler",
        "//machina/compiler/tf2xla:xla_helpers",
        "//machina/core:framework",
        "//machina/core:lib",
        "//machina/core:test",
        "//machina/core:test_main",
        "//machina/core/lib/monitoring:cell_reader",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/protobuf/tpu:compile_metadata_proto_cc",
        "//machina/core/tpu/kernels:tpu_compile_op_support",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_googletest//:gtest",
        "@toolchain-project//mlir:Pass",
        "@local_xla//xla:shape_util",
        "@local_xla//xla/client:client_library",
        "@local_xla//xla/stream_executor:platform",
        "@local_xla//xla/stream_executor:platform_manager",
        "@local_xla//xla/tsl/lib/monitoring:test_utils",
        "@local_xla//xla/tsl/platform:statusor",
    ],
)

tf_cc_test(
    name = "legalize_tf_test_gpu",
    srcs = ["legalize_tf_test_gpu.cc"],
    tags = [
        "config-cuda-only",
        "no_oss",  # This test only runs with GPU.
        "requires-gpu-nvidia",
    ],
    deps = [
        "//machina/compiler/jit",
        "//machina/compiler/mlir/tf2xla/api/v2/testing:compile_mlir",
        "//machina/compiler/tf2xla:xla_compiler",
        "//machina/compiler/tf2xla:xla_helpers",
        "//machina/core:test",
        "//machina/core:test_main",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/protobuf/tpu:compile_metadata_proto_cc",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest",
        "@local_xla//xla/tsl/platform:status_matchers",
        "@local_xla//xla/tsl/platform:statusor",
    ],
)

tf_proto_library(
    name = "device_type_proto",
    srcs = ["device_type.proto"],
    visibility = [
        "//learning/serving/contrib/tfrt/mlir/saved_model_analysis:__pkg__",
    ],
)

cc_library(
    name = "cluster_tf",
    srcs = ["cluster_tf.cc"],
    hdrs = ["cluster_tf.h"],
    visibility = [
        "//learning/serving/contrib/tfrt/mlir/saved_model_analysis:__pkg__",
        "//machina/compiler/mlir/tfrt:__pkg__",
        "//machina/compiler/mlir/tfrt/transforms/ifrt:__pkg__",
        "//machina/compiler/tf2xla:__pkg__",
    ],
    deps = [
        ":device_type_proto_cc",
        "//machina/compiler/mlir/machina:attribute_utils",
        "//machina/compiler/mlir/machina:dump_mlir_util",
        "//machina/compiler/mlir/machina:error_util",
        "//machina/compiler/mlir/machina:machina_types",
        "//machina/compiler/mlir/machina/transforms:verify_no_outside_compilation_markers_pass",
        "//machina/compiler/mlir/tf2xla/internal:clustering_bridge_passes",
        "//machina/compiler/mlir/tf2xla/internal:logging_hooks",
        "//machina/compiler/mlir/tf2xla/internal/passes:clustering_passes",
        "//machina/core:framework",
        "//machina/core:lib_proto_parsing",
        "//machina/core/platform:error_payloads",
        "//machina/core/platform:errors",
        "//machina/core/platform:stacktrace",
        "//machina/core/platform:status",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@toolchain-project//mlir:Support",
        "@local_tsl//tsl/platform:error_logging",
        "@local_xla//xla/tsl/platform:errors",
    ],
)

tf_cc_test(
    name = "cluster_tf_test",
    srcs = ["cluster_tf_test.cc"],
    data = [
        "testdata/empty_func.mlir",
        "testdata/invalid_executor.mlir",
        "testdata/outside_compilation.mlir",
    ],
    deps = [
        ":cluster_tf",
        "//machina/compiler/mlir:register_common_dialects",
        "//machina/compiler/mlir/machina",
        "//machina/compiler/mlir/machina:attribute_utils",
        "//machina/compiler/mlir/machina:tf_dialect_lib",
        "//machina/compiler/mlir/tf2xla/api/v2/testing:utils",
        "//machina/core/lib/monitoring:cell_reader",
        "//machina/core/platform:resource_loader",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Parser",
        "@local_xla//xla/tsl/lib/core:status_test_util",
        "@local_xla//xla/tsl/platform:status",
    ],
)

cc_library(
    name = "tf_dialect_to_executor",
    srcs = ["tf_dialect_to_executor.cc"],
    hdrs = ["tf_dialect_to_executor.h"],
    visibility = [
        "//learning/serving/contrib/tfrt/mlir/saved_model_analysis:__pkg__",
        "//machina/compiler/mlir/tfrt:__pkg__",
        "//machina/compiler/tf2xla:__pkg__",
    ],
    deps = [
        "//machina/compiler/jit:flags_headers",
        "//machina/compiler/mlir/machina:bridge_logger",
        "//machina/compiler/mlir/machina:dump_mlir_util",
        "//machina/compiler/mlir/machina/transforms:verify_no_outside_compilation_markers_pass",
        "//machina/compiler/mlir/tf2xla/internal:logging_hooks",
        "//machina/core:framework",
        "//machina/core/platform:error_payloads",
        "//machina/core/platform:status",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@toolchain-project//mlir:Support",
        "@toolchain-project//mlir:Transforms",
        "@local_tsl//tsl/platform:error_logging",
        "@local_xla//xla/tsl/lib/monitoring:counter",
        "@local_xla//xla/tsl/platform:errors",
        "@local_xla//xla/tsl/platform:status",
    ],
)

tf_cc_test(
    name = "tf_dialect_to_executor_test",
    srcs = ["tf_dialect_to_executor_test.cc"],
    data = [
        "testdata/empty_func.mlir",
        "testdata/func_with_dead_ops.mlir",
        "testdata/invalid_executor.mlir",
    ],
    deps = [
        ":tf_dialect_to_executor",
        "//machina/compiler/mlir:register_common_dialects",
        "//machina/compiler/mlir/tf2xla/api/v2/testing:utils",
        "//machina/core/lib/monitoring:cell_reader",
        "//machina/core/platform:resource_loader",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Parser",
        "@local_xla//xla/tsl/lib/core:status_test_util",
    ],
)

cc_library(
    name = "tf_executor_to_graph",
    srcs = [
        "tf_executor_to_graph.cc",
    ],
    hdrs = [
        "tf_executor_to_graph.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//machina/compiler/mlir:op_or_arg_name_mapper",
        "//machina/compiler/mlir/machina",
        "//machina/compiler/mlir/machina:convert_type",
        "//machina/compiler/mlir/machina:error_util",
        "//machina/compiler/mlir/machina:export_utils",
        "//machina/compiler/mlir/machina:translate_utils",
        "//machina/compiler/mlir/machina:verify_suitable_for_graph_export",
        "//machina/compiler/mlir/machina/translate:mlir_roundtrip_flags",
        "//machina/compiler/mlir/utils:name_utils",
        "//machina/core:core_cpu",
        "//machina/core:framework",
        "//machina/core:framework_internal",
        "//machina/core:graph",
        "//machina/core:lib",
        "//machina/core:protos_all_cc",
        "//machina/core/graph/regularization:util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@toolchain-project//mlir:Support",
        "@local_xla//xla:status_macros",
    ],
)

tf_cc_test(
    name = "tf_executor_to_graph_test",
    srcs = ["tf_executor_to_graph_test.cc"],
    data = [
        "testdata/valid_executor.mlir",
        "testdata/valid_graph.txt",
    ],
    deps = [
        ":tf_executor_to_graph",
        "//machina/compiler/jit",
        "//machina/compiler/mlir:register_common_dialects",
        "//machina/compiler/mlir/machina:mlir_roundtrip_flags",
        "//machina/compiler/tf2xla:xla_compiler",
        "//machina/compiler/tf2xla:xla_helpers",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:protos_all_cc",
        "//machina/core:test_main",
        "//machina/core/platform:resource_loader",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Parser",
        "@local_tsl//tsl/platform:protobuf",
        "@local_xla//xla/tsl/lib/core:status_test_util",
        "@riegeli//riegeli/bytes:fd_reader",
        "@riegeli//riegeli/bytes:read_all",
    ],
)

cc_library(
    name = "graph_to_tf_executor",
    srcs = [
        "graph_to_tf_executor.cc",
    ],
    hdrs = [
        "graph_to_tf_executor.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//machina/compiler/jit:shape_inference_helpers",
        "//machina/compiler/mlir:op_or_arg_name_mapper",
        "//machina/compiler/mlir/machina",
        "//machina/compiler/mlir/machina:convert_attr",
        "//machina/compiler/mlir/machina:convert_tensor",
        "//machina/compiler/mlir/machina:convert_type",
        "//machina/compiler/mlir/machina:dump_mlir_util",
        "//machina/compiler/mlir/machina:dynamic_shape_utils",
        "//machina/compiler/mlir/machina:error_util",
        "//machina/compiler/mlir/machina:mangling_util",
        "//machina/compiler/mlir/machina:machina_attributes",
        "//machina/compiler/mlir/machina:machina_types",
        "//machina/compiler/mlir/machina:translate_utils",
        "//machina/compiler/mlir/machina/transforms:machina_passes",
        "//machina/compiler/mlir/machina/translate:mlir_roundtrip_flags",
        "//machina/compiler/mlir/tf2xla/internal:graph_to_tf_executor_util",
        "//machina/compiler/mlir/tf2xla/internal:node_order",
        "//machina/compiler/tf2xla:functionalize_control_flow",
        "//machina/compiler/tf2xla:functionalize_control_flow_util",
        "//machina/compiler/tf2xla:tf2xla_defs",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:framework_internal",
        "//machina/core:lib",
        "//machina/core:protos_all_cc",
        "//machina/core/common_runtime:function_body",
        "//machina/core/platform:crash_analysis",
        "//machina/core/platform:types",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:DerivedAttributeOpInterface",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@toolchain-project//mlir:Support",
        "@local_xla//xla:status_macros",
        "@local_xla//xla/tsl/platform:status",
    ],
)

tf_cc_test(
    name = "graph_to_tf_executor_test",
    srcs = ["graph_to_tf_executor_test.cc"],
    data = [
        "testdata/graph_with_flib_def.txt",
        "testdata/valid_graph.txt",
    ],
    deps = [
        ":graph_to_tf_executor",
        "//machina/compiler/jit",
        "//machina/compiler/mlir:register_common_dialects",
        "//machina/compiler/mlir/machina:mlir_roundtrip_flags",
        "//machina/compiler/tf2xla:xla_compiler",
        "//machina/compiler/tf2xla:xla_helpers",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:protos_all_cc",
        "//machina/core:test_main",
        "//machina/core/platform:resource_loader",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
        "@toolchain-project//mlir:FuncDialect",
        "@toolchain-project//mlir:IR",
        "@local_tsl//tsl/platform:protobuf",
        "@local_xla//xla/tsl/lib/core:status_test_util",
        "@riegeli//riegeli/bytes:fd_reader",
        "@riegeli//riegeli/bytes:read_all",
    ],
)

cc_library(
    name = "mlir_roundtrip_flags",
    hdrs = ["mlir_roundtrip_flags.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//machina/core:framework",
        "//machina/core:protos_all_cc",
        "@com_google_absl//absl/strings",
        "@toolchain-project//toolchain:Support",
    ],
)
