load("//machina/core/platform:rules_cc.bzl", "cc_library")

package(
    # copybara:uncomment default_applicable_licenses = ["//machina:license"],
    default_visibility = ["//machina/compiler/tf2xla:internal"],
    licenses = ["notice"],
)

MACHINA_MACHINA_XLA_OPS_DEPS = [
    "@com_google_absl//absl/container:flat_hash_map",
    "@com_google_absl//absl/memory",
    "@com_google_absl//absl/synchronization",
    "//machina/compiler/jit:common",
    "//machina/compiler/jit:compilation_passes",
    "//machina/compiler/jit:flags",
    "//machina/compiler/jit:xla_activity_listener",
    "//machina/compiler/jit:xla_activity_proto_cc",
    "//machina/compiler/jit:device_compiler",
    "//machina/compiler/jit:variable_info",
    "//machina/compiler/jit:variable_info_util",
    "//machina/compiler/jit:xla_device_no_jit_rewrite_registration",
    "//machina/compiler/jit:xla_cluster_util",
    "//machina/compiler/jit:xla_host_recv_device_context",
    "//machina/compiler/jit:xla_host_send_device_context",
    "//machina/compiler/jit:xla_launch_util",
    "//machina/compiler/tf2xla:common",
    "//machina/compiler/tf2xla:tf2xla_util",
    "//machina/compiler/tf2xla:xla_compiler",
    "//machina/compiler/tf2xla:xla_helpers",
    "//machina/compiler/tf2xla:xla_op_registry",
    "@local_xla//xla:executable_run_options",
    "@local_xla//xla:status_macros",
    "@local_xla//xla/client:client_library",
    "@local_xla//xla/client:local_client",
    "@local_xla//xla/service:compiler",
    "@local_xla//xla/service/gpu:gpu_executable_run_options",
    "//machina/core:core_cpu_internal",
    "//machina/core:framework",
    "//machina/core:lib",
    "//machina/core:state_ops_op_lib",
    "//machina/core/platform:stream_executor_no_cuda",
    "//machina/core/profiler/lib:traceme",
    "@local_xla//xla/stream_executor/integrations:tf_allocator_adapter",
    "@com_google_absl//absl/types:optional",
]

# Linked by machina core, without registration of jit compilation passes.
cc_library(
    name = "xla_ops_no_jit_rewrite_registration",
    srcs = ["xla_ops.cc"],
    hdrs = ["xla_ops.h"],
    deps = MACHINA_MACHINA_XLA_OPS_DEPS + [
        "//machina/compiler/jit:device_compilation_cache",
        "//machina/compiler/jit:device_compilation_profiler",
        "//machina/compiler/jit:pjrt_compile_util",
        "//machina/compiler/jit:tf_graph_to_hlo_compiler",
        "//machina/compiler/jit:tf_to_hlo_compiler",
        "//machina/compiler/jit:xla_compile_util",
        "//machina/core:framework_internal",
        "//machina/core:protos_all_cc",
        "//machina/core/platform:refcount",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:node_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:span",
        "@local_tsl//tsl/profiler/lib:traceme",
        "@local_xla//xla/hlo/ir:hlo",
        "@local_xla//xla/pjrt:pjrt_client",
        "@local_xla//xla/service:executable",
        "@local_xla//xla/stream_executor/host:host_platform_id",
        "@local_xla//xla/tsl/concurrency:async_value",
        "@local_xla//xla/tsl/protobuf:error_codes_proto_impl_cc",
    ],
    alwayslink = 1,
)

cc_library(
    name = "xla_ops",
    hdrs = ["xla_ops.h"],
    deps = MACHINA_MACHINA_XLA_OPS_DEPS + [
        ":xla_ops_no_jit_rewrite_registration",
        "//machina/compiler/jit:jit_compilation_passes",
        "//machina/core:protos_all_cc",
    ],
    alwayslink = 1,
)
