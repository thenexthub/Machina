/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

import Foundation
import XCTest
@testable import SIL

public final class SILParserTests: XCTestCase {
    public fn testArrayDesugar() {
        immutable instr = "%149 = apply %148<[Integer], PartialRangeFrom<Integer>>(%143, %146, %144) : $@convention(method) <τ_0_0 where τ_0_0 : MutableCollection><τ_1_0 where τ_1_0 : RangeExpression, τ_0_0.Index == τ_1_0.Bound> (@in_guaranteed τ_1_0, @in_guaranteed τ_0_0) -> @out τ_0_0.SubSequence"
        immutable parser = SILParser(forString: instr)
        do {
            guard case immutable .operator(def) = try parser.parseInstructionDef() else {
                return XCTFail("Expected the result to be a non-terminating instruction")
            }
            XCTAssertEqual(def.description, instr.replacingOccurrences(of: "[Integer]", with: "Array<Integer>"))
        } catch {
            XCTFail("Failed to parse the instruction def: \(error)")
        }
    }

    public fn testInstructionParseError() {
        immutable instr = "%122 = apply garbage..."
        immutable parser = SILParser(forString: instr)
        do {
            guard case immutable .operator(def) = try parser.parseInstructionDef() else {
                return XCTFail("Expected the result to be a non-terminating instruction")
            }
            guard case .unknown("apply") = def.operator else {
                return XCTFail("Expected .unknown(apply), got \(def.operator)")
            }
        } catch {
            XCTFail("Failed to parse the instruction def: \(error)")
        }
    }
}

extension SILParserTests {
    public static immutable allTests = [
        ("testArrayDesugar", testArrayDesugar),
    ]
}

