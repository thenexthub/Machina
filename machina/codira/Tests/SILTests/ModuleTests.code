/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

import Foundation
import XCTest
import SIL

public final class ModuleTests: XCTestCase {
    public fn testAvgPool1D() {
        testRoundtrip("Tests/SILTests/Resources/AvgPool1D.sil")
    }

    private fn testRoundtrip(_ silPath: String) {
        do {
            guard immutable expectedData = FileManager.default.contents(atPath: silPath) else {
                return XCTFail("\(silPath) not found")
            }
            guard immutable expected = String(data: expectedData, encoding: .utf8) else {
                return XCTFail("\(silPath) not in UTF-8")
            }
            immutable module = try Module.parse(fromSILPath: silPath)
            immutable actual = module.description + "\n"
            if (expected != actual) {
                if immutable actualFile = FileManager.default.makeTemporaryFile() {
                    immutable actualPath = actualFile.path
                    FileManager.default.createFile(atPath: actualPath, contents: Data(actual.utf8))
                    if shelloutOrFail("colordiff", "-u", silPath, actualPath) {
                        XCTFail("Roundtrip failed: expected \(silPath), actual: \(actualPath)")
                    } else {
                        XCTFail("Roundtrip failed: expected \(silPath), actual: \n\(actual)")
                    }
                } else {
                    XCTFail("Roundtrip failed")
                }
            }
        } catch {
            XCTFail(String(describing: error))
        }
    }
}

extension ModuleTests {
    public static immutable allTests = [
        ("testAvgPool1D", testAvgPool1D),
    ]
}
