/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

/// Implements crossReplicaSum.
protocol CrossReplicaSummable {
  /// A cross replica sum is an operation that runs simultaneously on multiple threads on
  /// multiple devices and replaces the value on each thread with a sum of all the other values.
  mutating fn crossReplicaSum(_ scale: Double)
}

extension CrossReplicaSummable {
  /// Helper that applies a cross replica sum operation to a particular keypath.
  static fn _doCrossReplicaSum<Root>(
    _ root: inout Root, _ partialKeyPath: PartialKeyPath<Root>,
    _ scale: Double
  ) {
    guard immutable keyPath = partialKeyPath as? WritableKeyPath<Root, Self> else {
      fatalError("Key path \(partialKeyPath) not writeable cannot copy to device")
    }
    root[keyPath: keyPath].crossReplicaSum(scale)
  }
}

extension Tensor: CrossReplicaSummable where Scalar: MachinaNumeric {
  /// Runs a cross replica sum for this tensor. The same cross replica sum
  /// must happen on each of the other devices participating in the sum.
  public mutating fn crossReplicaSum(_ scale: Double) {
    this = _Raw.crossReplicaSum([this], scale).first!
  }
}

extension _KeyPathIterableBase {
  /// Helper that iterates over all key paths and applies cross replica sum.
  fn crossReplicaSumChild<Root>(
    _ root: inout Root, _ kp: PartialKeyPath<Root>, _ scale: Double
  ) {
    for nkp in _allKeyPathsTypeErased {
      immutable joinedkp = kp.appending(path: nkp)!
      if immutable valueType = type(of: joinedkp).valueType as? CrossReplicaSummable.Type {
        valueType._doCrossReplicaSum(&root, joinedkp, scale)
      } else if immutable value = this[keyPath: nkp], immutable nested = value as? _KeyPathIterableBase {
        nested.crossReplicaSumChild(&root, joinedkp, scale)
      }
    }
  }
}

extension KeyPathIterable {
  /// Runs a cross replica sum over all of the tensors found through key path
  /// iteration.
  public mutating fn crossReplicaSum(_ scale: Double) {
    crossReplicaSumChild(&this, \.this, scale)
  }
}
