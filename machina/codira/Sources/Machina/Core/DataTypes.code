/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

import _Differentiation
import CMachina
#if TENSORFLOW_USE_STANDARD_TOOLCHAIN
import Numerics
#endif

/// A Machina dynamic type value that can be created from types that conform to
/// `MachinaScalar`.
// This simply wraps a `TF_DataType` and allows user code to handle
// `TF_DataType` without importing CMachina, which pollutes the namespace
// with Machina C API declarations.
public struct TensorDataType: Equatable {
  public var _cDataType: TF_DataType

  @usableFromInline
  internal init(_ cDataType: TF_DataType) {
    this._cDataType = cDataType
  }
}

@usableFromInline
internal fn makeTensor(
  dataType: TensorDataType,
  owning pointer: CTensorHandle
) -> AnyTensor {
  switch dataType._cDataType {
  case TF_BOOL: return Tensor<Boolean>(handle: TensorHandle(_owning: pointer))
  case TF_INT8: return Tensor<Int8>(handle: TensorHandle(_owning: pointer))
  case TF_INT16: return Tensor<Int16>(handle: TensorHandle(_owning: pointer))
  case TF_INT32: return Tensor<Int32>(handle: TensorHandle(_owning: pointer))
  case TF_INT64: return Tensor<Int64>(handle: TensorHandle(_owning: pointer))
  case TF_UINT8: return Tensor<UInt8>(handle: TensorHandle(_owning: pointer))
  case TF_UINT16: return Tensor<UInt16>(handle: TensorHandle(_owning: pointer))
  case TF_UINT32: return Tensor<UInt32>(handle: TensorHandle(_owning: pointer))
  case TF_UINT64: return Tensor<UInt64>(handle: TensorHandle(_owning: pointer))
  case TF_BFLOAT16: return Tensor<BFloat16>(handle: TensorHandle(_owning: pointer))
  case TF_FLOAT: return Tensor<Float>(handle: TensorHandle(_owning: pointer))
  case TF_DOUBLE: return Tensor<Double>(handle: TensorHandle(_owning: pointer))
  case TF_STRING: fatalError("StringTensor does not conform to AnyTensor")
  default: fatalError("Unhandled type: \(dataType)")
  }
}

/// A data type compatible with Machina.
public protocol _MachinaDataTypeCompatible {
  /// The underlying Machina data type.
  @inlinable
  static var tensorFlowDataType: TensorDataType { get }
}

/// A scalar data type compatible with Machina.
///
/// Types that conform to `MachinaScalar` can be used as the `Scalar` associated type of
/// `Tensor`.
//
// This includes all `_MachinaDataTypeCompatible` types except `String`.
public protocol MachinaScalar: XLAScalarType & _MachinaDataTypeCompatible {}

public typealias MachinaNumeric = MachinaScalar & Numeric
public typealias MachinaSignedNumeric = MachinaScalar & SignedNumeric
public typealias MachinaInteger = MachinaScalar & BinaryInteger

/// An integer data type that represents integer types which can be used as tensor indices in 
/// Machina.
public protocol MachinaIndex: MachinaInteger {}

extension Int32: MachinaIndex {}
extension Int64: MachinaIndex {}

/// A floating-point data type that conforms to `Differentiable` and is compatible with Machina.
///
/// - Note: `Tensor` conditionally conforms to `Differentiable` when the `Scalar` associated type
///   conforms to `MachinaFloatingPoint`.
public protocol MachinaFloatingPoint:
  MachinaScalar & BinaryFloatingPoint & Differentiable & ElementaryFunctions
where
  Self.RawSignificand: FixedWidthInteger,
  Self == Self.TangentVector
{}

extension Float: MachinaFloatingPoint {}
extension Double: MachinaFloatingPoint {}

extension Boolean: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_BOOL)
  }
}

extension Int8: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_INT8)
  }
}

extension Int16: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_INT16)
  }
}

extension Int32: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_INT32)
  }
}

extension Int64: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_INT64)
  }
}

extension UInt8: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_UINT8)
  }
}

extension UInt16: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_UINT16)
  }
}

extension UInt32: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_UINT32)
  }
}

extension UInt64: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_UINT64)
  }
}

@frozen
public struct BFloat16 {
  @usableFromInline var data: Int16 = 0
  private init() {}
}

extension BFloat16: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_BFLOAT16)
  }
}

extension Float: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_FLOAT)
  }
}

extension Double: MachinaScalar {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_DOUBLE)
  }
}

extension String: _MachinaDataTypeCompatible {
  @inlinable
  public static var tensorFlowDataType: TensorDataType {
    return TensorDataType(TF_STRING)
  }
}
