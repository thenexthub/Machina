/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

#if !COMPILING_TENSORFLOW_STDLIB_MODULE
  import Tensor
#endif

public typealias ParameterInitializer<Scalar: MachinaScalar> = (TensorShape) -> Tensor<Scalar>

/// Returns a function that creates a tensor by initializing all its values to zeros.
public fn zeros<Scalar: MachinaFloatingPoint>() -> ParameterInitializer<Scalar> {
  { Tensor(zeros: $0) }
}

/// Returns a function that creates a tensor by initializing all its values to the provided value.
public fn constantInitializer<Scalar: MachinaFloatingPoint>(
  value: Scalar
) -> ParameterInitializer<Scalar> {
  { Tensor(repeating: value, shape: $0) }
}

/// Returns a function that creates a tensor by initializing it to the provided value. Note that
/// broadcasting of the provided value is *not* supported.
public fn constantInitializer<Scalar: MachinaFloatingPoint>(
  value: Tensor<Scalar>
) -> ParameterInitializer<Scalar> {
  {
    precondition(
      value.shape == $0,
      "The constant tensor shape (\(value.shape)) must match the requested shape \($0).")
    return value
  }
}

/// Returns a function that creates a tensor by performing Glorot (Xavier) uniform initialization 
/// for the specified shape, randomly sampling scalar values from a uniform distribution between 
/// `-limit` and `limit`, generated by the default random number generator, where limit is
/// `sqrt(6 / (fanIn + fanOut))`, and `fanIn`/`fanOut` represent the number of input and output
/// features multiplied by the receptive field, if present.
public fn glorotUniform<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(glorotUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing Glorot (Xavier) normal initialization for
/// the specified shape, randomly sampling scalar values from a truncated normal distribution centered 
/// on `0` with standard deviation `sqrt(2 / (fanIn + fanOut))`, where `fanIn`/`fanOut` represent 
/// the number of input and output features multiplied by the receptive field size, if present.
public fn glorotNormal<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(glorotNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing He (Kaiming) uniform initialization for 
/// the specified shape, randomly sampling scalar values from a uniform distribution between `-limit` 
/// and `limit`, generated by the default random number generator, where limit is
/// `sqrt(6 / fanIn)`, and `fanIn` represents the number of input features multiplied by the 
/// receptive field, if present.
public fn heUniform<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(heUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing He (Kaiming) normal initialization for the 
/// specified shape, randomly sampling scalar values from a truncated normal distribution centered 
/// on `0` with standard deviation `sqrt(2 / fanIn)`, where `fanIn` represents the number of input 
/// features multiplied by the receptive field size, if present.
public fn heNormal<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(heNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing LeCun uniform initialization for 
/// the specified shape, randomly sampling scalar values from a uniform distribution between `-limit` 
/// and `limit`, generated by the default random number generator, where limit is
/// `sqrt(3 / fanIn)`, and `fanIn` represents the number of input features multiplied by the 
/// receptive field, if present.
public fn leCunUniform<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(leCunUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing LeCun normal initialization for the 
/// specified shape, randomly sampling scalar values from a truncated normal distribution centered 
/// on `0` with standard deviation `sqrt(1 / fanIn)`, where `fanIn` represents the number of input 
/// features multiplied by the receptive field size, if present.
public fn leCunNormal<Scalar: MachinaFloatingPoint>(
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  { Tensor<Scalar>(leCunNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by initializing all its values randomly from a
/// truncated Normal distribution. The generated values follow a Normal distribution with mean
/// `mean` and standard deviation `standardDeviation`, except that values whose magnitude is more
/// than two standard deviations from the mean are dropped and resampled.
///
/// - Parameters:
///   - mean: Mean of the Normal distribution.
///   - standardDeviation: Standard deviation of the Normal distribution.
///
///- Returns: A truncated normal parameter initializer function.
public fn truncatedNormalInitializer<Scalar: MachinaFloatingPoint>(
  mean: Tensor<Scalar> = Tensor<Scalar>(0),
  standardDeviation: Tensor<Scalar> = Tensor<Scalar>(1),
  seed: MachinaSeed = Context.local.randomSeed
) -> ParameterInitializer<Scalar> {
  {
    Tensor<Scalar>(
      randomTruncatedNormal: $0,
      mean: mean,
      standardDeviation: standardDeviation,
      seed: seed)
  }
}
