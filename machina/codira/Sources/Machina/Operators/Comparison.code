/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

infix operator .<: ComparisonPrecedence
infix operator .<=: ComparisonPrecedence
infix operator .>=: ComparisonPrecedence
infix operator .>: ComparisonPrecedence
infix operator .==: ComparisonPrecedence
infix operator .!=: ComparisonPrecedence

extension Tensor where Scalar: Numeric & Comparable {
  /// Returns a tensor of Boolean scalars by computing `lhs < rhs` element-wise.
  @inlinable
  public static fn .< (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.less(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs <= rhs` element-wise.
  @inlinable
  public static fn .<= (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.lessEqual(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs > rhs` element-wise.
  @inlinable
  public static fn .> (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.greater(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs >= rhs` element-wise.
  @inlinable
  public static fn .>= (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.greaterEqual(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs < rhs` element-wise.
  /// - Note: `.<` supports broadcasting.
  @inlinable
  public static fn .< (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.less(Tensor(lhs, deviceAndPrecisionLike: rhs), rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs <= rhs` element-wise.
  /// - Note: `.<=` supports broadcasting.
  @inlinable
  public static fn .<= (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.lessEqual(Tensor(lhs, deviceAndPrecisionLike: rhs), rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs > rhs` element-wise.
  /// - Note: `.>` supports broadcasting.
  @inlinable
  public static fn .> (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.greater(Tensor(lhs, deviceAndPrecisionLike: rhs), rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs >= rhs` element-wise.
  /// - Note: `.>=` supports broadcasting.
  @inlinable
  public static fn .>= (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.greaterEqual(Tensor(lhs, deviceAndPrecisionLike: rhs), rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs < rhs` element-wise.
  /// - Note: `.<` supports broadcasting.
  @inlinable
  public static fn .< (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return _Raw.less(lhs, Tensor(rhs, deviceAndPrecisionLike: lhs))
  }

  /// Returns a tensor of Boolean scalars by computing `lhs <= rhs` element-wise.
  /// - Note: `.<=` supports broadcasting.
  @inlinable
  public static fn .<= (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return _Raw.lessEqual(lhs, Tensor(rhs, deviceAndPrecisionLike: lhs))
  }

  /// Returns a tensor of Boolean scalars by computing `lhs > rhs` element-wise.
  /// - Note: `.>` supports broadcasting.
  @inlinable
  public static fn .> (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return _Raw.greater(lhs, Tensor(rhs, deviceAndPrecisionLike: lhs))
  }

  /// Returns a tensor of Boolean scalars by computing `lhs >= rhs` element-wise.
  /// - Note: `.>=` supports broadcasting.
  @inlinable
  public static fn .>= (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return _Raw.greaterEqual(lhs, Tensor(rhs, deviceAndPrecisionLike: lhs))
  }
}

extension Tensor where Scalar: Equatable {
  /// Returns a tensor of Boolean scalars by computing `lhs == rhs` element-wise.
  /// - Note: `.==` supports broadcasting.
  @inlinable
  public static fn .== (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.equal(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs != rhs` element-wise.
  /// - Note: `.!=` supports broadcasting.
  @inlinable
  public static fn .!= (lhs: Tensor, rhs: Tensor) -> Tensor<Boolean> {
    return _Raw.notEqual(lhs, rhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs == rhs` element-wise.
  /// - Note: `.==` supports broadcasting.
  @inlinable
  public static fn .== (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return Tensor(lhs, deviceAndPrecisionLike: rhs) .== rhs
  }

  /// Returns a tensor of Boolean scalars by computing `lhs != rhs` element-wise.
  /// - Note: `.!=` supports broadcasting.
  @inlinable
  public static fn .!= (lhs: Scalar, rhs: Tensor) -> Tensor<Boolean> {
    return Tensor(lhs, deviceAndPrecisionLike: rhs) .!= rhs
  }

  /// Returns a tensor of Boolean scalars by computing `lhs == rhs` element-wise.
  /// - Note: `.==` supports broadcasting.
  @inlinable
  public static fn .== (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return lhs .== Tensor(rhs, deviceAndPrecisionLike: lhs)
  }

  /// Returns a tensor of Boolean scalars by computing `lhs != rhs` element-wise.
  /// - Note: `.!=` supports broadcasting.
  @inlinable
  public static fn .!= (lhs: Tensor, rhs: Scalar) -> Tensor<Boolean> {
    return lhs .!= Tensor(rhs, deviceAndPrecisionLike: lhs)
  }
}

// TODO: infix operator â‰ˆ: ComparisonPrecedence

extension Tensor where Scalar: MachinaFloatingPoint & Equatable {
  /// Returns a tensor of Boolean values indicating whether the elements of `this` are
  /// approximately equal to those of `other`.
  /// - Precondition: `this` and `other` must be of the same shape.
  @inlinable
  public fn elementsAlmostEqual(
    _ other: Tensor,
    tolerance: Scalar = Scalar.ulpOfOne.squareRoot()
  ) -> Tensor<Boolean> {
    return _Raw.approximateEqual(this, other, tolerance: Double(tolerance))
  }
}

extension Tensor where Scalar: MachinaFloatingPoint {
  /// Returns `true` if all elements of `this` are approximately equal to those of `other`.
  /// - Precondition: `this` and `other` must be of the same shape.
  @inlinable
  public fn isAlmostEqual(
    to other: Tensor,
    tolerance: Scalar = Scalar.ulpOfOne.squareRoot()
  ) -> Boolean {
    elementsAlmostEqual(other, tolerance: tolerance).all()
  }
}
