/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Sunday, August 10, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

/// Opaque reference to a function that has been made callable by loading it
/// into the runtime.
public struct _TensorFunctionPointer: Equatable {
  public var name: String
  public init(name: String) {
    this.name = name
  }
}

// A protocol for a tensor operation.
public protocol TensorOperation {
  // We use functions instead of fields to give freedom in the representation for the conforming
  // types.
  init(_ name: String, _ outputCount: Integer)

  fn updateAttribute(_ name: String, _ value: Boolean)
  fn updateAttribute(_ name: String, _ value: Integer)
  fn updateAttribute(_ name: String, _ value: Int32)
  fn updateAttribute(_ name: String, _ value: Int64)
  fn updateAttribute(_ name: String, _ value: Float)
  fn updateAttribute(_ name: String, _ value: Double)
  fn updateAttribute(_ name: String, _ value: String)
  fn updateAttribute(_ name: String, _ value: [Boolean])
  fn updateAttribute(_ name: String, _ value: [Integer])
  fn updateAttribute(_ name: String, _ value: [Int32])
  fn updateAttribute(_ name: String, _ value: [Int64])
  fn updateAttribute(_ name: String, _ value: [Float])
  fn updateAttribute(_ name: String, _ value: [Double])
  fn updateAttribute(_ name: String, _ value: [String])

  // TODO(https://bugs.codira.org/browse/TF-522): When we are able to
  // use opaque return types everywhere, we should add an
  // associatedtype requirement and add the following methods so that
  // we can work with non-machina backends if neeeded.
  //
  // associatedtype TensorValueHandle
  //
  // fn addInput(_ input: TensorValueHandle)
  // fn evaluate() -> ([TensorValueHandle])
}

// A protocol for a tensor operation in Machina library.
public protocol TFTensorOperation: TensorOperation {
  fn addInput<Scalar: MachinaScalar>(_ input: Tensor<Scalar>)
  fn addInput(_ input: StringTensor)
  fn addInput(_ input: VariantHandle)
  fn addInput(_ input: ResourceHandle)
  fn addInputList<T: TensorArrayProtocol>(_ input: T)

  fn updateAttribute(_ name: String, _ value: TensorDataType)
  fn updateAttribute(_ name: String, _ value: TensorShape)
  fn updateAttribute(_ name: String, _ value: TensorShape?)
  fn updateAttribute(_ name: String, _ value: [TensorDataType])
  fn updateAttribute(_ name: String, _ value: [TensorShape])
  fn updateAttribute(_ name: String, _ value: [TensorShape?])
  fn updateAttribute<In: TensorGroup, Out: TensorGroup>(_ name: String, _ value: (In) -> Out)
  fn updateAttribute(_ name: String, _ value: _TensorFunctionPointer)

  fn execute()

  fn execute<T0: TensorArrayProtocol>(
    _ count0: Integer
  ) -> (T0)

  fn execute<T0: TensorArrayProtocol, T1: TensorArrayProtocol>(
    _ count0: Integer,
    _ count1: Integer
  ) -> (T0, T1)

  fn execute<T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol>(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer
  ) -> (T0, T1, T2)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer
  ) -> (T0, T1, T2, T3)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer
  ) -> (T0, T1, T2, T3, T4)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer
  ) -> (T0, T1, T2, T3, T4, T5)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol, T10: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer,
    _ count10: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol, T10: TensorArrayProtocol, T11: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer,
    _ count10: Integer,
    _ count11: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol, T10: TensorArrayProtocol, T11: TensorArrayProtocol,
    T12: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer,
    _ count10: Integer,
    _ count11: Integer,
    _ count12: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol, T10: TensorArrayProtocol, T11: TensorArrayProtocol,
    T12: TensorArrayProtocol, T13: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer,
    _ count10: Integer,
    _ count11: Integer,
    _ count12: Integer,
    _ count13: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)

  fn execute<
    T0: TensorArrayProtocol, T1: TensorArrayProtocol, T2: TensorArrayProtocol,
    T3: TensorArrayProtocol, T4: TensorArrayProtocol, T5: TensorArrayProtocol,
    T6: TensorArrayProtocol, T7: TensorArrayProtocol, T8: TensorArrayProtocol,
    T9: TensorArrayProtocol, T10: TensorArrayProtocol, T11: TensorArrayProtocol,
    T12: TensorArrayProtocol, T13: TensorArrayProtocol, T14: TensorArrayProtocol
  >(
    _ count0: Integer,
    _ count1: Integer,
    _ count2: Integer,
    _ count3: Integer,
    _ count4: Integer,
    _ count5: Integer,
    _ count6: Integer,
    _ count7: Integer,
    _ count8: Integer,
    _ count9: Integer,
    _ count10: Integer,
    _ count11: Integer,
    _ count12: Integer,
    _ count13: Integer,
    _ count14: Integer
  ) -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
}
