load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("//machina:machina.bzl", "if_google")

package(
    # copybara:uncomment default_applicable_licenses = ["//machina:license"],
    default_visibility = [":friends"],
    licenses = ["notice"],
)

package_group(
    name = "friends",
    packages = [
        # Authorized users go here.
        # copybara:uncomment "//cloud/ai/platform/prediction/...",
        # copybara:uncomment "//learning/brain/experimental/tfrt/...",
        # copybara:uncomment "//learning/brain/tfrt/...",
        # copybara:uncomment "//learning/infra/mira/...",
        # copybara:uncomment "//learning/serving/...",
        # copybara:uncomment "//learning/pathways/serving/model_tests/...",
        # copybara:uncomment "//learning/pathways/serving/runtime/...",
        "//machina/core/runtime_fallback/...",
        "//machina/core/tfrt/mlrt/application/machina/tests/...",
        "//machina/compiler/mlir/tfrt/...",
        "//machina/core/tfrt/...",
        "//machina_serving/...",
        "//machina/core/tfrt/saved_model/python/...",
        # copybara:uncomment "//platforms/xla/tests/saved_models/...",
        # copybara:uncomment "//quality/webanswers/servo2/...",
        "//machina/core/tfrt/saved_model/python",  #python wrapping
        "//machina/core/tfrt/saved_model/utils/...",
        "//smartass/brain/inference/...",
    ],
)

cc_library(
    name = "saved_model_aot_compile",
    srcs = [
        "saved_model_aot_compile.cc",
    ],
    hdrs = ["saved_model_aot_compile.h"],
    deps = [
        ":saved_model_util",
        "//machina/cc/saved_model:constants",
        "//machina/compiler/jit:device_compilation_cluster_signature",
        "//machina/compiler/jit:pjrt_device_compiler_client",
        "//machina/compiler/jit:tf_graph_to_hlo_compiler",
        "//machina/compiler/jit:xla_device_no_jit_rewrite_registration",
        "//machina/compiler/mlir/machina:serialize_mlir_module_utils",
        "//machina/compiler/mlir/machina:translate_lib",
        "//machina/compiler/mlir/tfrt:import_model",
        "//machina/compiler/mlir/tfrt:tfrt_compile_options",
        "//machina/compiler/mlir/tfrt:tfrt_pipeline_options",
        "//machina/compiler/mlir/tfrt/transforms/mlrt:import_model",
        "//machina/compiler/tf2xla:xla_compiler",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:lib",
        "//machina/core/framework:attr_value_proto_cc",
        "//machina/core/framework:function_proto_cc",
        "//machina/core/framework:versions_proto_cc",
        "//machina/core/ops",
        "//machina/core/platform:enable_tf2_utils",
        "//machina/core/platform:path",
        "//machina/core/platform:status",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/runtime_fallback/kernel:kernel_fallback_execute_compat",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/graph_executor",
        "//machina/core/tfrt/graph_executor:export_mlir",
        "//machina/core/tfrt/graph_executor:graph_execution_options",
        "//machina/core/tfrt/mlrt/bytecode",
        "//machina/core/tfrt/runtime",
        "//machina/core/tfrt/saved_model/utils:serialize_utils",
        "//machina/core/tfrt/utils",
        "//machina/core/tpu:virtual_device",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@toolchain-project//mlir:IR",
        "@toolchain-project//mlir:Pass",
        "@local_tsl//tsl/platform:env",
        "@local_tsl//tsl/platform:status",
        "@local_xla//xla/pjrt:pjrt_compiler",
        "@local_xla//xla/pjrt:pjrt_executable",
        "@local_xla//xla/pjrt/gpu:se_gpu_pjrt_client",
        "@local_xla//xla/pjrt/gpu:se_gpu_pjrt_compiler",
        "@local_xla//xla/service:compiler",
        "@local_xla//xla/stream_executor/cuda:cuda_platform_id",
        "@tf_runtime//:bef",
        "@tf_runtime//:befexecutor",
        "@tf_runtime//:core_runtime_alwayslink",
        "@tf_runtime//:hostcontext",
    ],
)

cc_library(
    name = "saved_model_lib",
    srcs = [
        "saved_model.cc",
        "saved_model.h",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":saved_model_util",
        "//machina/cc/saved_model:fingerprinting",
        "//machina/cc/saved_model:reader",
        "//machina/compiler/jit:flags_headers",
        "//machina/compiler/mlir/machina",
        "//machina/compiler/mlir/machina:mlir_roundtrip_flags",
        "//machina/compiler/mlir/machina:serialize_mlir_module_utils",
        "//machina/compiler/mlir/machina:translate_lib",
        "//machina/compiler/mlir/machina/transforms:machina_passes",
        "//machina/compiler/mlir/tf2xla/api/v2:graph_to_tf_executor",
        "//machina/compiler/mlir/tfrt:import_model",
        "//machina/compiler/mlir/tfrt:saved_model",
        "//machina/compiler/mlir/tfrt:tfrt_compile_options",
        "//machina/compiler/mlir/tfrt/transforms/mlrt:import_model",
        "//machina/core:all_kernels",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core:lib",
        "//machina/core/common_runtime:device_mgr",
        "//machina/core/framework:function_proto_cc",
        "//machina/core/framework:graph_proto_cc",
        "//machina/core/framework:tensor_proto_cc",
        "//machina/core/ops",
        "//machina/core/platform:enable_tf2_utils",
        "//machina/core/platform:errors",
        "//machina/core/platform:path",
        "//machina/core/profiler/lib:traceme",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/runtime_fallback/kernel:kernel_fallback_compat_request_state",
        "//machina/core/runtime_fallback/kernel:kernel_fallback_execute_compat",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/fallback:op_kernel_runner",
        "//machina/core/tfrt/graph_executor",
        "//machina/core/tfrt/graph_executor:export_mlir",
        "//machina/core/tfrt/graph_executor:graph_execution_options",
        "//machina/core/tfrt/ifrt:checkpoint_loader",
        "//machina/core/tfrt/ifrt:ifrt_model_restore_context",
        "//machina/core/tfrt/mlrt/bytecode",
        "//machina/core/tfrt/mlrt/bytecode:executable",
        "//machina/core/tfrt/mlrt/interpreter:context",
        "//machina/core/tfrt/mlrt/kernel",
        "//machina/core/tfrt/mlrt/kernel:batch_kernel",
        "//machina/core/tfrt/runtime",
        "//machina/core/tfrt/runtime:work_queue_interface",
        "//machina/core/tfrt/saved_model/utils:serialize_utils",
        "//machina/core/tfrt/stubs:model_config_stub",
        "//machina/core/tfrt/utils",
        "//machina/core/tfrt/utils:error_util",
        "//machina/core/tfrt/utils:fallback_tensor",
        "//machina/core/tfrt/utils:tfrt_graph_execution_state",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
        "@toolchain-project//mlir:FuncExtensions",
        "@toolchain-project//mlir:IR",
        "@local_tsl//tsl/platform:protobuf",
        "@local_xla//xla:status_macros",
        "@tf_runtime//:bef",
        "@tf_runtime//:befexecutor",
        "@tf_runtime//:core_runtime_alwayslink",
        "@tf_runtime//:hostcontext",
        "@tf_runtime//:init_tfrt_dialects",
        "@tf_runtime//:metrics",
        "@tf_runtime//:support",
    ] + if_google([
        "//third_party/tf_runtime_google:streamz_metrics_registry_alwayslink",
    ]),
)

cc_library(
    name = "saved_model_cpu",
    hdrs = ["saved_model.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":saved_model_lib",
        ":saved_model_util",
        "//machina/core/framework:graph_proto_cc",
        "//machina/core/framework:tensor_proto_cc",
        "//machina/core/platform:thread_annotations",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/graph_executor",
        "//machina/core/tfrt/graph_executor:graph_execution_options",
        "//machina/core/tfrt/runtime",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@local_tsl//tsl/platform:protobuf",
        "@tf_runtime//:hostcontext",
    ],
)

cc_library(
    name = "saved_model",
    hdrs = ["saved_model.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":saved_model_lib",
        ":saved_model_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "//machina/core/framework:graph_proto_cc",
        "//machina/core/framework:tensor_proto_cc",
        "//machina/core/platform:thread_annotations",
        "//machina/core/protobuf:for_core_protos_cc",
        "@local_tsl//tsl/platform:protobuf",
        # TODO(chky): Remove kernel fallback tensor deps.
        "//machina/core/runtime_fallback/kernel:kernel_fallback_tensor_conversion_alwayslink",
        "//machina/core/tfrt/gpu/kernel:gpurt_kernels",
        "//machina/core/runtime_fallback/runtime:runtime_fallback_alwayslink",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/graph_executor",
        "//machina/core/tfrt/graph_executor:graph_execution_options",
        "//machina/core/tfrt/runtime",
        "@tf_runtime//:hostcontext",
    ] + if_google([
        "//learning/brain/tfrt/support:export_mlir",
        "//learning/brain/tfrt/tpu/compiler/mlir:tf_to_tfrt_tpu",
        "//learning/brain/tfrt/saved_model:model_config_impl",
    ]),
)

cc_library(
    name = "saved_model_testutil",
    testonly = 1,
    srcs = ["saved_model_testutil.cc"],
    hdrs = ["saved_model_testutil.h"],
    tags = ["no_oss"],
    deps = [
        ":saved_model",
        "//machina/cc/saved_model:loader",
        "//machina/compiler/mlir/tfrt:tfrt_compile_options",
        "//machina/core:protos_all_cc",
        "//machina/core/framework:tensor_testutil",
        "//machina/core/tfrt/runtime",
        "@tf_runtime//:hostcontext",
    ],
)

cc_library(
    name = "saved_model_import_input",
    srcs = ["saved_model_import_input.cc"],
    hdrs = ["saved_model_import_input.h"],
    deps = [
        "//machina/compiler/mlir/machina:import_model",
        "//machina/core:core_cpu_base",
        "//machina/core:framework",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/graph_executor:config",
        "//machina/core/tfrt/utils:tfrt_graph_execution_state",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "saved_model_util",
    srcs = ["saved_model_util.cc"],
    hdrs = ["saved_model_util.h"],
    deps = [
        ":saved_model_import_input",
        "//machina/cc/saved_model:reader",
        "//machina/compiler/mlir/machina",
        "//machina/compiler/mlir/machina:deserialize_mlir_module_utils",
        "//machina/compiler/mlir/machina:import_model",
        "//machina/compiler/mlir/tfrt:import_model",
        "//machina/compiler/mlir/tfrt:saved_model",
        "//machina/compiler/mlir/tfrt:tfrt_compile_options",
        "//machina/compiler/mlir/tfrt:transforms/gpu_passes",
        "//machina/compiler/mlir/tfrt/ir:tfrt_fallback_async_opdefs",
        "//machina/compiler/mlir/tfrt/ir:tfrt_fallback_opdefs",
        "//machina/core:framework",
        "//machina/core:framework_types_hdr",
        "//machina/core:lib",
        "//machina/core/framework:graph_proto_cc",
        "//machina/core/framework:tensor",
        "//machina/core/framework:tensor_proto_cc",
        "//machina/core/platform:path",
        "//machina/core/protobuf:for_core_protos_cc",
        "//machina/core/tfrt/fallback:fallback_state",
        "//machina/core/tfrt/graph_executor:config",
        "//machina/core/tfrt/mlrt/bytecode",
        "//machina/core/tfrt/saved_model/utils:serialize_utils",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
        "@toolchain-project//toolchain:Support",
        "@toolchain-project//mlir:IR",
        "@local_tsl//tsl/platform:protobuf",
        "@tf_runtime//:bef",
        "@tf_runtime//:init_tfrt_dialects",
    ],
)
