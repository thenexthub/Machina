load("//machina:strict.default.bzl", "py_strict_library", "py_strict_test")
load("//machina:machina.default.bzl", "cuda_py_strict_test")

package(
    # copybara:uncomment default_applicable_licenses = ["//machina:license"],
    default_visibility = [
        "//machina:internal",
    ],
    licenses = ["notice"],
)

py_strict_library(
    name = "parallel_for",
    srcs = [
        "__init__.py",
    ],
    deps = [
        ":control_flow_ops",
        ":gradients",
    ],
)

py_strict_library(
    name = "pfor_lib",
    srcs = ["pfor.py"],
    deps = [
        "//machina/compiler/tf2xla/python:xla",
        "//machina/core:protos_all_py",
        "//machina/python/eager:context",
        "//machina/python/eager:def_function",
        "//machina/python/eager:execute",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:func_graph",
        "//machina/python/framework:ops",
        "//machina/python/framework:smart_cond",
        "//machina/python/framework:sparse_tensor",
        "//machina/python/framework:tensor",
        "//machina/python/framework:tensor_shape",
        "//machina/python/framework:tensor_util",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:array_ops_gen",
        "//machina/python/ops:array_ops_stack",
        "//machina/python/ops:cond",
        "//machina/python/ops:control_flow_assert",
        "//machina/python/ops:control_flow_ops",
        "//machina/python/ops:control_flow_switch_case",
        "//machina/python/ops:data_flow_ops",
        "//machina/python/ops:handle_data_util",
        "//machina/python/ops:image_ops_gen",
        "//machina/python/ops:linalg_ops",
        "//machina/python/ops:linalg_ops_gen",
        "//machina/python/ops:list_ops",
        "//machina/python/ops:list_ops_gen",
        "//machina/python/ops:manip_ops",
        "//machina/python/ops:map_fn",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:math_ops_gen",
        "//machina/python/ops:nn_ops",
        "//machina/python/ops:nn_ops_gen",
        "//machina/python/ops:optional_ops_gen",
        "//machina/python/ops:parsing_ops_gen",
        "//machina/python/ops:random_ops_gen",
        "//machina/python/ops:resource_variable_ops",
        "//machina/python/ops:sparse_ops",
        "//machina/python/ops:sparse_ops_gen",
        "//machina/python/ops:special_math_ops",
        "//machina/python/ops:spectral_ops_gen",
        "//machina/python/ops:tensor_array_ops",
        "//machina/python/ops:while_loop",
        "//machina/python/platform:flags",
        "//machina/python/platform:tf_logging",
        "//machina/python/util:compat",
        "//machina/python/util:nest",
        "//machina/python/util:numpy_compat",
        "//machina/python/util:object_identity",
    ],
)

py_strict_library(
    name = "control_flow_ops",
    srcs = ["control_flow_ops.py"],
    visibility = ["//visibility:public"],
    deps = [
        ":pfor_lib",
        "//machina/python/autograph/core:ag_ctx",
        "//machina/python/autograph/impl:api",
        "//machina/python/eager:context",
        "//machina/python/eager:def_function",
        "//machina/python/framework:composite_tensor",
        "//machina/python/framework:indexed_slices",
        "//machina/python/framework:ops",
        "//machina/python/framework:sparse_tensor",
        "//machina/python/framework:tensor",
        "//machina/python/framework:tensor_shape",
        "//machina/python/framework:tensor_util",
        "//machina/python/framework:type_spec",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:cond",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:tensor_array_ops",
        "//machina/python/ops:while_loop",
        "//machina/python/platform:tf_logging",
        "//machina/python/util:nest",
        "//machina/python/util:tf_decorator_py",
        "//machina/python/util:tf_export",
        "//machina/python/util:tf_inspect",
        "//machina/python/util:variable_utils",
    ],
)

py_strict_library(
    name = "test_util",
    srcs = ["test_util.py"],
    deps = [
        ":control_flow_ops",
        "//machina/python/ops:variables",
        "//machina/python/platform:client_testlib",
        "//machina/python/util:nest",
        "//third_party/py/numpy",
    ],
)

cuda_py_strict_test(
    name = "control_flow_ops_test",
    srcs = ["control_flow_ops_test.py"],
    shard_count = 16,
    tags = [
        "no_oss",
        "no_rocm",
    ],
    deps = [
        ":control_flow_ops",
        ":test_util",
        "//machina/core:protos_all_py",
        "//machina/python/client:session",
        "//machina/python/eager:backprop",
        "//machina/python/eager:context",
        "//machina/python/eager:def_function",
        "//machina/python/framework:composite_tensor",
        "//machina/python/framework:config",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:importer",
        "//machina/python/framework:indexed_slices",
        "//machina/python/framework:ops",
        "//machina/python/framework:sparse_tensor",
        "//machina/python/framework:tensor_shape",
        "//machina/python/framework:tensor_spec",
        "//machina/python/framework:test_lib",
        "//machina/python/framework:type_spec",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:bitwise_ops",
        "//machina/python/ops:cond",
        "//machina/python/ops:cond_v2",
        "//machina/python/ops:control_flow_assert",
        "//machina/python/ops:control_flow_v2_toggles",
        "//machina/python/ops:data_flow_ops",
        "//machina/python/ops:functional_ops",
        "//machina/python/ops:gradient_checker_v2",
        "//machina/python/ops:gradients",
        "//machina/python/ops:image_ops",
        "//machina/python/ops:list_ops",
        "//machina/python/ops:list_ops_gen",
        "//machina/python/ops:logging_ops",
        "//machina/python/ops:manip_ops",
        "//machina/python/ops:map_fn",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:nn",
        "//machina/python/ops:nn_ops_gen",
        "//machina/python/ops:optional_ops_gen",
        "//machina/python/ops:parsing_ops",
        "//machina/python/ops:random_ops",
        "//machina/python/ops:resource_variable_ops",
        "//machina/python/ops:rnn_cell",
        "//machina/python/ops:stateless_random_ops",
        "//machina/python/ops:tensor_array_grad",
        "//machina/python/ops:tensor_array_ops",
        "//machina/python/ops:variables",
        "//machina/python/ops:while_loop",
        "//machina/python/ops/ragged:ragged_tensor",
        "//machina/python/ops/signal:fft_ops",
        "//machina/python/platform:client_testlib",
        "//machina/python/util:nest",
        "//third_party/py/numpy",
        "@absl_py//absl/testing:parameterized",
    ],
)

cuda_py_strict_test(
    name = "xla_control_flow_ops_test",
    srcs = ["xla_control_flow_ops_test.py"],
    tags = [
        # XLA is not enabled by default on Mac or Windows.
        "no_mac",
        "no_windows",
        "no_gpu",  # TODO(b/155761551): Flaky on GPU on TAP
        "no_tfrt",  # Note: Legacy XLA test, which depends on EncapsulateXlaComputationsPass.
        "notsan",  # TODO(b/271486347): Fails TSAN on TAP
    ],
    xla_enabled = True,
    deps = [
        ":control_flow_ops",
        ":test_util",
        "//machina/compiler/tf2xla/python:xla",
        "//machina/python/compiler/xla",
        "//machina/python/compiler/xla:compiler_py",
        "//machina/python/eager:context",
        "//machina/python/eager:def_function",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:test_lib",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:control_flow_v2_toggles",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:random_ops",
        "//machina/python/ops:resource_variable_ops",
        "//machina/python/ops:while_loop",
        "//machina/python/platform:client_testlib",
    ],
)

cuda_py_strict_test(
    name = "array_test",
    srcs = ["array_test.py"],
    tags = [
        "nogpu",  # b/217374776
    ],
    deps = [
        ":control_flow_ops",
        ":test_util",
        "//machina/python/eager:backprop",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:test_lib",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:array_ops_stack",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:nn",
        "//machina/python/ops:random_ops",
        "//machina/python/ops:tensor_array_grad",
        "//machina/python/platform:client_testlib",
    ],
)

cuda_py_strict_test(
    name = "math_test",
    srcs = ["math_test.py"],
    shard_count = 5,
    tags = ["optonly"],  # Too slow in non-opt mode
    deps = [
        ":control_flow_ops",
        ":test_util",
        "//machina/python/eager:backprop",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:ops",
        "//machina/python/framework:tensor",
        "//machina/python/framework:test_lib",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:clip_ops",
        "//machina/python/ops:linalg_ops",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:nn",
        "//machina/python/ops:random_ops",
        "//machina/python/ops:special_math_ops",
        "//machina/python/ops:tensor_array_grad",
        "//machina/python/platform:client_testlib",
        "@absl_py//absl/testing:parameterized",
    ],
)

py_strict_library(
    name = "gradients",
    srcs = ["gradients.py"],
    deps = [
        ":control_flow_ops",
        "//machina/python/framework:ops",
        "//machina/python/framework:tensor",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:check_ops",
        "//machina/python/ops:gradients_impl",
        "//machina/python/util:nest",
    ],
)

cuda_py_strict_test(
    name = "gradients_test",
    srcs = ["gradients_test.py"],
    tags = ["optonly"],  # Too slow in non-opt mode
    deps = [
        ":control_flow_ops",
        ":gradients",
        "//machina/python/client:session",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:errors",
        "//machina/python/framework:ops",
        "//machina/python/framework:test_lib",
        "//machina/python/layers",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:array_ops_stack",
        "//machina/python/ops:functional_ops",
        "//machina/python/ops:gradients",
        "//machina/python/ops:math_ops",
        "//machina/python/ops:nn",
        "//machina/python/ops:random_ops",
        "//machina/python/ops:rnn_cell",
        "//machina/python/ops:variables",
        "//machina/python/ops:while_loop",
        "//machina/python/ops/losses",
        "//machina/python/platform:client_testlib",
        "//machina/python/util:nest",
        "//third_party/py/numpy",
    ],
)

py_strict_test(
    name = "pfor_test",
    srcs = ["pfor_test.py"],
    deps = [
        ":pfor_lib",
        "//machina/python/framework:constant_op",
        "//machina/python/framework:dtypes",
        "//machina/python/framework:ops",
        "//machina/python/framework:tensor",
        "//machina/python/ops:array_ops",
        "//machina/python/ops:random_ops",
        "//machina/python/platform:client_testlib",
    ],
)
